#!/bin/bash

################################################################################
# start and update the shell container for this project
################################################################################

doshie_uid="$( id -u )"
doshie_gid="$( id -g )"
doshie_root="$( readlink -f $( dirname $0 ) )"

# restart from an existing shell, if possible
if [[ -f .doshie/.existing_shell ]]; then
  existing_shell="$( cat .doshie/.existing_shell )"
else
  existing_shell=""
fi

# remove existing shell
if [[ "$@" == "--rm" ]]; then

  if [[ ! -z "$existing_shell" ]]; then
    echo "removing doshie shell: $existing_shell" >&2
    docker rm -v -f $existing_shell >/dev/null
  else
    echo "no existing doshie shell exists for this project" >&2
  fi

  if [[ ! -z "$existing_shell" ]]; then
    if ! docker ps -a -q --no-trunc | grep $existing_shell >/dev/null; then
      rm -f .doshie/.existing_shell
    else
      echo "something went wrong and the shell wasn't removed. sorry." >&2
      exit 1
    fi
  fi

  exit

fi

# construct shell cmd from args
doshie_cmd=""

for i in $( seq 1 $# ); do
  doshie_cmd="$doshie_cmd \"$( echo "$1" | sed -e 's/\"/\\\"/g' )\""
  shift
done

# ensure existing shell exists, otherwise clear the reference
if [[ ! -z "$existing_shell" ]]; then
  if ! docker ps -a -q --no-trunc | grep $existing_shell >/dev/null; then
    echo "doshe shell was lost, so a new one will be built" >&2
    existing_shell=""
  fi
fi

# set default settings
DOSHIE_BASE_IMAGE=centos:centos7
DOSHIE_ENV_UPDATE=/bin/true
DOSHIE_DOCKER_FLAGS=""

# source the rc settings
if [[ -f .doshie.rc ]]; then
  . .doshie.rc
fi

# if an existing shell is not defined, start a new one
if [[ -z "$existing_shell" ]]; then

  rm -f .doshie/.ready

  existing_shell=$( docker run -d \
                               -t \
                               -i \
                               -v "$doshie_root"/..:/src \
                               -e DOSHIE_CMD="" \
                               -e DOSHIE_UID="$doshie_uid" \
                               -e DOSHIE_GID="$doshie_gid" \
                               $DOSHIE_DOCKER_FLAGS \
                               "$DOSHIE_BASE_IMAGE" \
                               /bin/bash -c '. /src/.doshie/start-shell' )

  echo "$existing_shell" > .doshie/.existing_shell

  echo -n "waiting for shell initialization..." >&2

  doshie_ready="no"

  docker logs -f ${existing_shell} &
  tail_pid=$!

  for attempt in $( seq 1 7200 ); do

    if ! docker ps -a -q --no-trunc | grep $existing_shell >/dev/null 2>&1; then
      echo
      echo "shell disappeared while waiting!" >&2
      exit 1
    fi

    if [[ -f .doshie/.ready ]]; then
      doshie_ready="yes"
      break
    fi

    sleep 0.5

  done

  kill ${tail_pid}

  if [[ "$doshie_ready" != "yes" ]]; then
    echo "timed out while waiting for doshie shell to become ready" >&2
    exit 1
  fi

  echo

fi

# start existing shell
docker start "$existing_shell" >/dev/null 2>&1

docker_flags="-t -i"

if [[ ! -z "$doshie_cmd" ]]; then
  docker_flags=""
fi

docker exec $docker_flags \
            --detach=false \
            "$existing_shell" \
            /bin/bash -c "export DOSHIE_CMD=$( printf '%q' "$doshie_cmd" );
                          export DOSHIE_UID=\"$doshie_uid\";
                          export DOSHIE_GID=\"$doshie_gid\";
                          . /src/.doshie/start-shell"
